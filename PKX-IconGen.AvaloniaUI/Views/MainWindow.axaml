<!--
    PKX-IconGen.AvaloniaUI - Avalonia user interface for PKX-IconGen.Core
    Copyright (C) 2021-2022 Samuel Caron/mikeyX#4697

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>. 
-->
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:data="using:PKXIconGen.Core.Data"
        xmlns:vm="using:PKXIconGen.AvaloniaUI.ViewModels"
        xmlns:views="using:PKXIconGen.AvaloniaUI.Views"
        xmlns:conv="using:PKXIconGen.AvaloniaUI.Converters"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="clr-namespace:Projektanker.Icons.Avalonia;assembly=Projektanker.Icons.Avalonia"
        
        mc:Ignorable="d" d:DesignWidth="1024" d:DesignHeight="780"
        x:Class="PKXIconGen.AvaloniaUI.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel" x:CompileBindings="True"
        
        Icon="/Assets/gen-icon.ico"
        Title="PKX-IconGen"
        
        TransparencyLevelHint="AcrylicBlur"
        Background="Transparent"
        ExtendClientAreaChromeHints="PreferSystemChrome"
        ExtendClientAreaToDecorationsHint="True"
        
        MinWidth="1024" Width="1024" MinHeight="780" Height="780" CanResize="True">
  <Window.Styles>
    <StyleInclude Source="/Assets/Styles.axaml" />
  </Window.Styles>
  <Window.Resources>
    <conv:PathStringFileNameStringConverter x:Key="PathStringFileNameStringConverter" />
  </Window.Resources>

  <Panel>
    <ExperimentalAcrylicBorder IsHitTestVisible="False">
      <ExperimentalAcrylicBorder.Material>
        <ExperimentalAcrylicMaterial
            BackgroundSource="Digger"
            TintColor="Black"
            TintOpacity="0.75"
            MaterialOpacity="0.65" />
      </ExperimentalAcrylicBorder.Material>
    </ExperimentalAcrylicBorder>
    <DockPanel>
      <StackPanel IsVisible="{Binding IsWindows, Mode=OneTime}" Orientation="Horizontal" HorizontalAlignment="Left" Height="32" Margin="8,0,0,0" DockPanel.Dock="Top">
        <Image Source="/Assets/gen-icon.ico" Width="16" Margin="0,0,8,0" />
        <TextBlock VerticalAlignment="Center">PKX-IconGen</TextBlock>
      </StackPanel>
      <views:MenuView DataContext="{Binding MenuVM}" DockPanel.Dock="Top" />
      <!--20 rows-->
      <Grid ShowGridLines="False" ColumnDefinitions="0.25*,1.3*,1*" RowDefinitions="*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,35">
        <!--Blender Path-->
        <TextBlock Margin="8" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="1">Blender Path:</TextBlock>
        <Grid Grid.Column="1" Grid.Row="1" ColumnDefinitions="*,30" RowDefinitions="*">
          <TextBox IsEnabled="{Binding !CurrentlyRendering}" Text="{Binding BlenderPath, Mode=TwoWay}" Margin="0,0,5,0" Height="32" Grid.Column="0" Grid.Row="0">
            <ToolTip.Tip>
Path to the Blender executable. No need to have the import addon installed, it is included with PKX-IconGen.
Tested versions:
  2.83.18: Crashes on import
  2.93.4: Works properly
  3.0.0: Works properly

On Windows: Path to the Blender executable.

On MacOS: The default path is included, if any aliases have been made for Blender for different versions, you can specify that alias for Blender here. I also have no idea how OSX works exactly to be honest. üòÇ

On Linux: Path to the Blender executable. It is possible to specify a link or an application name accessible from PATH like "blender" or "blender_293".
            </ToolTip.Tip>
          </TextBox>
          <Button Width="30" Height="25" HorizontalAlignment="Center" VerticalAlignment="Center" Command="{ReflectionBinding BrowseBlenderPath}" Grid.Column="1" Grid.Row="0">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">...</TextBlock>
          </Button>
        </Grid>
        <Grid IsVisible="{Binding !IsBlenderVersionValid}" VerticalAlignment="Top" ColumnDefinitions="20,*" RowDefinitions="*" Grid.Column="1" Grid.Row="2">
          <i:Icon FontSize="16" Value="mdi-alert" Classes.Warning="{Binding BlenderPathWarning}" Classes.Error="{Binding BlenderPathError}" Grid.Column="0" Grid.Row="0" />
          <TextBlock FontSize="12" TextWrapping="Wrap" Classes.Warning="{Binding BlenderPathWarning}" Classes.Error="{Binding BlenderPathError}" Text="{Binding BlenderWarningText, Mode=OneWay}" Grid.Column="1" Grid.Row="0" />
        </Grid>

        <!--Blender Optional Arguments-->
        <TextBlock Margin="8" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="3">Blender Args:</TextBlock>
        <TextBox IsEnabled="{Binding !CurrentlyRendering}" Text="{Binding BlenderOptionalArguments, Mode=TwoWay}" Height="32" Grid.Column="1" Grid.Row="3">
          <ToolTip.Tip>
Additionnal optional arguments to pass to Blender. You normally do not need to input anything here.

USE ONLY IF YOU KNOW WHAT YOU'RE DOING.

&lt;List used args here&gt;
          </ToolTip.Tip>
        </TextBox>

        <!--Output Path-->
        <TextBlock Margin="8" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="4">Output Path:</TextBlock>
        <Grid Grid.Column="1" Grid.Row="4" ColumnDefinitions="*,30" RowDefinitions="*">
          <TextBox IsEnabled="{Binding !CurrentlyRendering}" Text="{Binding OutputPath, Mode=TwoWay}" Margin="0,0,5,0" Height="32" Grid.Column="0" Grid.Row="0">
            <ToolTip.Tip>
Output path for the generated icons.
            </ToolTip.Tip>
          </TextBox>
          <Button Width="30" Height="25" HorizontalAlignment="Center" VerticalAlignment="Center" Command="{ReflectionBinding BrowseOutputPath}" Grid.Column="1" Grid.Row="0">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">...</TextBlock>
          </Button>
        </Grid>

        <!--Icon Style-->
        <TextBlock Margin="8" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="5">Icon Style:</TextBlock>
        <ComboBox IsEnabled="{Binding !CurrentlyRendering}" Items="{Binding IconStyleItems, Mode=OneWay}" SelectedItem="{Binding SelectedIconStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="32" Grid.Column="1" Grid.Row="5">
          <ComboBox.ItemTemplate>
            <DataTemplate DataType="{x:Type data:IconStyle}">
              <Panel VerticalAlignment="Center" Height="30">
                <TextBlock VerticalAlignment="Center" Text="{Binding DisplayName}" />
              </Panel>
            </DataTemplate>
          </ComboBox.ItemTemplate>

          <ToolTip.Tip>
Styles based on Pok√©mon Colosseum, Pok√©mon XD: Gale of Darkness or Pok√©mon Battle Revolution.

Pok√©mon Colosseum has no cropping.

Pok√©mon XD uses the same rendering as Colosseum, but circle crops are used for each icon.

Pok√©mon Battle Revolution uses different rendering as the Gamecube games, have a circle crop and a white outline. NOT AVAILABLE YET.
          </ToolTip.Tip>
        </ComboBox>

        <!--Render Scale-->
        <TextBlock Margin="8" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="6">Render Scale:</TextBlock>
        <ComboBox IsEnabled="{Binding !CurrentlyRendering}" Items="{Binding RenderScaleItems, Mode=OneWay}" SelectedItem="{Binding SelectedRenderScale}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="32" Grid.Column="1" Grid.Row="6">
          <ToolTip.Tip>
Integer scale used to know at what resolution the icons are going to be rendered.

Use x1 for making new pokemon icons to be imported.
Use the others for texture packs or any higher resolution needs.

Base icon resolution for Colo/XD: 42px X 42px
Base icon resolution for PBR: 48px X 48px

Please note that this can drastically increase the rendering and processing time depending on your computer.
          </ToolTip.Tip>
        </ComboBox>

        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Text="Pokemon" Grid.Column="1" Grid.Row="7" />
        <!--Pokemon Buttons-->
        <Grid ShowGridLines="False" ColumnDefinitions="0.75*,1.15*,0.75*,0.90*" RowDefinitions="*" Grid.Column="1" Grid.Row="8">
          <Panel HorizontalAlignment="Center" Grid.Column="0" Grid.Row="0">
            <Button IsEnabled="{Binding !CurrentlyRendering}" Content="Add New" Command="{ReflectionBinding NewRenderDataCommand}" />
          </Panel>
          <Panel HorizontalAlignment="Center" Grid.Column="1" Grid.Row="0">
            <Button Content="Delete Selected" Command="{ReflectionBinding DeleteSelectedRenderData}">
              <Button.IsEnabled>
                  <MultiBinding Converter="{x:Static BoolConverters.And}">
                    <Binding Path="!CurrentlyRendering"/>
                    <Binding Path="EnableDeleteButton"/>
                  </MultiBinding>
              </Button.IsEnabled>
            </Button>
          </Panel>
          <Panel HorizontalAlignment="Center" Grid.Column="2" Grid.Row="0">
            <Button IsEnabled="{Binding !CurrentlyRendering}" Content="Select All" Command="{ReflectionBinding SelectAllRenderData}" />
          </Panel>
          <Panel HorizontalAlignment="Center" Grid.Column="3" Grid.Row="0">
            <Button IsEnabled="{Binding !CurrentlyRendering}" Content="Unselect All" Command="{ReflectionBinding DeselectAllRenderData}" />
          </Panel>
        </Grid>
        <!--Pokemon-->
        <TextBlock Text="Hide Built-Ins" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="0" Grid.Row="10" />
        <CheckBox IsChecked="{Binding BuiltInsHidden}" IsThreeState="False" HorizontalAlignment="Center" Grid.Column="0" Grid.Row="11" />
        <Grid VerticalAlignment="Center" Margin="4,0,0,0" ColumnDefinitions="0.65*, *, 0.25*, 0.25*" RowDefinitions="*" Grid.Column="1" Grid.Row="9">
          <TextBlock Text="Name" Grid.Column="0" />
          <TextBlock Text="Model" Grid.Column="1" />
          <TextBlock Text="Built In" HorizontalAlignment="Center" Grid.Column="2" />
        </Grid>
        <ListBox IsEnabled="{Binding !CurrentlyRendering}" Items="{Binding PokemonRenderDataItems}" Selection="{Binding PokemonRenderDataSelection}" SelectionMode="Multiple,Toggle" Margin="0,0,0,5" Background="#ff202020" Grid.Column="1" Grid.Row="10" Grid.RowSpan="8">
          <ListBox.Styles>
            <Style Selector="ListBoxItem">
              <Setter Property="Padding" Value="6"/>
            </Style>
          </ListBox.Styles>
          <ListBox.ItemTemplate>
              <DataTemplate DataType="{x:Type data:PokemonRenderData}">
                <Grid ColumnDefinitions="0.65*, *, 0.25*, 0.25*" RowDefinitions="*">
                  <TextBlock VerticalAlignment="Center" Text="{Binding Name}" Grid.Column="0" />
                  <TextBlock VerticalAlignment="Center" Text="{Binding Render.Model, Converter={StaticResource PathStringFileNameStringConverter}}" Grid.Column="1" />
                  <i:Icon IsVisible="{Binding BuiltIn}" VerticalAlignment="Center" FontSize="16" Value="mdi-check" Grid.Column="2" />
                  <Panel HorizontalAlignment="Right" Grid.Column="3">
                    <Button HorizontalAlignment="Center" Command="{ReflectionBinding $parent[ListBox].DataContext.EditRenderDataCommand}" CommandParameter="{Binding .}">
                      <i:Icon FontSize="16" Value="mdi-pencil" />
                    </Button>
                  </Panel>
                </Grid>
              </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!--Assets Path-->
        <TextBlock Margin="8" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="0" Grid.Row="18">Assets Path:</TextBlock>
        <Grid Grid.Column="1" Grid.Row="18" ColumnDefinitions="*,30" RowDefinitions="*">
          <TextBox Text="{Binding AssetsPath, Mode=TwoWay}" Margin="0,0,5,0" Height="32" Grid.Column="0" Grid.Row="0" Classes.Error="{Binding !AssetsPathIsValid}">
            <ToolTip.Tip>
Optional if custom Pokemon are used, needed for default built-in Pokemon. Useful when exporting and sharing Pokemon data.

From there you can include {{AssetsPath}} in a model path. Don't include a trailing slash or backslash.
This is the "Game Files" folder from Colosseum Tool or GoD-Tool. Make sure to "export" everything containing "pkx".
              
In Colosseum/GoD Tool:
Go in 4. Import/Export files
Filter with "pkx"
Enter "export"
            </ToolTip.Tip>
          </TextBox>
          <Button Width="30" Height="25" HorizontalAlignment="Center" VerticalAlignment="Center" Command="{ReflectionBinding BrowseAssetsPath}" Grid.Column="1" Grid.Row="0">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">...</TextBlock>
          </Button>
        </Grid>

        <!--Log-->
        <Grid Margin="16,0,16,8" Grid.Column="2" Grid.Row="0" Grid.RowSpan="18" ColumnDefinitions="*" RowDefinitions="20,*">
          <TextBlock Height="20" Margin="5" Grid.Column="0" Grid.Row="0">Log</TextBlock>
          <views:LogView DataContext="{Binding LogVM}" Padding="0,5,0,0" Grid.Column="0" Grid.Row="1" />
        </Grid>

        <!--State and render button-->
        <Grid Margin="16,0,16,5" ColumnDefinitions="50,*,75" RowDefinitions="*" Grid.Column="2" Grid.Row="18" Grid.RowSpan="2">
          <Grid ColumnDefinitions="50" RowDefinitions="*,*" VerticalAlignment="Center" Grid.Column="0" Grid.Row="0">
            <TextBlock Text="{Binding PercentPokemonRendered}" Width="50" TextAlignment="Center" VerticalAlignment="Center" Grid.Column="0" Grid.Row="0" />
            <TextBlock Text="{Binding DisplayPokemonRendered}" Width="50" TextAlignment="Center" VerticalAlignment="Center" Grid.Column="0" Grid.Row="1" />
          </Grid>

          <ProgressBar Minimum="0" Maximum="{Binding NbOfRenders}" Value="{Binding NbOfPokemonRendered}" Height="20" Margin="5" VerticalAlignment="Center" Grid.Column="1" Grid.Row="0" />
          <Button IsVisible="{Binding !CurrentlyRendering}" Width="75" HorizontalAlignment="Right" VerticalAlignment="Center" Command="{ReflectionBinding RenderCommand}" Grid.Column="2" Grid.Row="0">
            <TextBlock TextAlignment="Center">Render</TextBlock>
          </Button>
          <Button IsVisible="{Binding CurrentlyRendering}" Width="75" HorizontalAlignment="Right" VerticalAlignment="Center" Command="{ReflectionBinding EndRender}" Grid.Column="2" Grid.Row="0">
            <TextBlock TextAlignment="Center">Cancel</TextBlock>
          </Button>
        </Grid>
      </Grid>
    </DockPanel>
  </Panel>
</Window>
